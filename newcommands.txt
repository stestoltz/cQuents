Œº FUNCTION: average
Œ∑ FUNCTION: median
Œî VAR: difference between last two items in sequence
‚Üë BINOP: knuth arrow / tetration
‚â∫ UNARYOP: rotate left one
‚âª UNARYOP: rotate right one
üô∏ third level separator
 
 
 
 
 
 
 
¬Ω VAR:  .5
‚Öì VAR:  .3...
¬º VAR:  .25
‚Öí VAR:  .1
‚Öü UNARYOP:  1/
‚àö FUNCTION: sqrt
‚àõ FUNCTION: cube root
‚àú FUNCTION: fourth root
‚à® BINOP: logical and
‚àß BINOP: logical or
¬´ BINOP: left shift
¬¨ UNARYOP: logical not
¬ª BINOP: right shift
‚®Ω BINOP: log
‚Çä PUNARYOP: inc
‚Çã PUNARYOP: dec
 No-op
! PUNARYOP: factorial
" CONTAINER: compressed string
# UNARYOP: convert to num
$ UNARYOP: convert to string
% BINOP: mod
& BINOP: bitwise and
' CONTAINER: strings
( CONTAINER: paren
) CONTAINER: paren
* BINOP: exponent
+ BINOP: addition
, separator
- BINOP: minus
. decimal separator
/ BINOP: fraction bar (lower precendence than division)
0
1
2
3
4
5
6
7
8
9
: MODE: sequence 1
; second level separator
< BINOP: less than
= BINOP: equal to
> BINOP: greater than
? ternary
@
A VAR: input[0]
B VAR: input[1]
C VAR: input[2]
D VAR: input list
E
F
G FUNCTION: GCD
H
I BINOP: intdiv
J FUNCTION: numbers not yet in sequence, smallest to largest
K FUNCTION: n choose k; or, combinations
L FUNCTION: length
M FUNCTION: max
N
O FUNCTION: OEIS
P FUNCTION: partitions
Q
R FUNCTION: round
S FUNCTION: sum
T
U
V
W
X FUNCTION: exp
Y
Z
[ index
\ escape
] index
^ BINOP: bitwise xor
_ constants
`
a FUNCTION: abs
b FUNCTION: to base (def 2)
c FUNCTION: ceil
d FUNCTION: proper divisors (discluding n)
e
f FUNCTION: floor
g
h
i BINOP: in
j VAR: smallest positive num not yet in sequence
k VAR: current index in sequence
l UNARYOP: length
m FUNCTION: min
n VARIABLE: target (as inputed)
o
p FUNCTION: next prime
q
r FUNCTION: nth root
s UNARYOP: sum
t
u
v
w VAR: a list
x VAR: a[-3]
y VAR: a[-2]
z VAR: a[-1]
{ nested seq
| BINOP: bitwise or
} nested seq
~ bitwise not
\n line separator
‚Å∞
¬π
¬≤ PUNARYOP: squared
¬≥ PUNARYOP: cubed
‚Å¥ PUNARYOP: to the fourth power
‚Åµ
‚Å∂
‚Å∑
‚Å∏
‚Åπ
‚Åª to the -1 power or to the -x power
‚ü®
¬ø ternary
‚ü©
√∑ BINOP: divide
√ó BINOP: multiply
‚ÇÄ
‚ÇÅ 1st line
‚ÇÇ 2nd line
‚ÇÉ 3rd line
‚ÇÑ
‚ÇÖ
‚ÇÜ
‚Çá
‚Çà
‚Çâ
ùïè VAR: 10
‚ÑÇ VAR: 100
ùïÑ VAR: 1000
‚¶ó
¬∑ BINOP: concat
‚¶ò
‚àë MODE: sum
‚àè MODE: product
‚àà MODE: is in?
‚àâ MODE: is not in?
œÉ FUNCTION: divisors
œÜ FUNCTION: positive ints up to n that a relatively prime to n
œâ FUNCTION: unique prime factors
Œ© FUNCTION: all prime factors
‚â§ BINOP: less than or equal to
‚â† BINOP: not equal to
‚â• BINOP: greater than or equal to
·∫†
·∏Ñ
·∏å
·∫∏
·∏§
·ªä
·∏≤
·∏∂ FUNCTION: LCM
·πÇ
·πÜ
·ªå
·πö FUNCTION: reverse
·π¢
·π¨
·ª§
·πæ
·∫à
·ª¥
·∫í
»¶
·∏Ç
ƒä FUNCTION: cosine
·∏ä
ƒñ
·∏û
ƒ†
·∏¢
ƒ∞
ƒø
·πÄ
·πÑ
»Æ
·πñ FUNCTION: is palindrome
·πò FUNCTION: rotate
·π† FUNCTION: sine
·π™ FUNCITON: tangent
·∫Ü
·∫ä
·∫é
≈ª
·∫°
·∏Ö
·∏ç FUNCTION: difference
·∫π
·∏•
·ªã
·∏≥
·∏∑ FUNCTION: ln
·πÉ
·πá
·ªç
·πõ FUNCTION: repeat (python: str * int)
·π£
·π≠
·ª•
·πø
·∫â
·ªµ
·∫ì
»ß
·∏É
ƒã FUNCTION: arccos
·∏ã
ƒó
·∏ü
ƒ°
·∏£
≈Ä
·πÅ
·πÖ
»Ø
·πó
·πô
·π° FUNCTION: arcsin
·π´ FUNCTION: arctan
·∫á
·∫ã
·∫è
≈º
‚Ä¶
‚ãØ
‚ãÆ MODE: sequence 2
‚à´
Œû FUNCTION: get line
ùîº BINOP: times 10 to the power of
