----------| Formats

-----| Program Format
[[literals][parameters]<mode>]<sequence>

-----| Literal Format
[literals][|join[|backliterals]]

-----| Parameter Formats
[$|=][arg[,arg]...]
["]
[#][frontinput[,frontinput]...][|[backinput[,backinput]...]]

-----| Sequence Format
<item>[,item]

-----| Input
input = frontinput + userinput + backinput
Input is expected if the input fetchers (A-E) are used in the program. If there is an extra input afterwards, it is called n. If the input lengths do not match up, an error occurs.

-----| Function Format
<name>[parameter[, parameter]...][)]

----------| Characters

-----| Literal Selectors
 @   | Escapes the next character as a string literal
 '   | Quote to capture string literals
 
-----| Parameters (see format above)
 #   | Default Input: adds input to the user's
 =   | Sequence Start: specifies the first terms of the sequence
 $   | Starting Index: specifies the start index (default is 1)
 "   | Stringify: join on empty string, treat n as index in string, not in list

-----| Modes
 :   | Sequence 1: If n, output the nth term. Otherwise, output the whole sequence
 ::  | Sequence 2: If n, output the sequence up to and including the nth term. Otherwise, TODO
 ;   | Series: If n, output the sum of the sequence up to and including n. Otherwise, TODO (output convergent sum of sequence)
 ?   | Query: If there is n, output true if n is in the sequence, and false if n is not in the sequence. (Currently assumes strictly increasing). Otherwise, ignore sequence.
 ??  | Reverse Query: Same as query, but with outputs swapped.
 ;;  | TODO: Closest
 
-----| Numbers
Numbers are formed using . and 0-9 as would be expected. Use negation (-) for negative numbers.

-----| Variables
 $   | Current index in sequence
 n   | Target: n as defined above, if given
 k   | Like index, but if there are multiple terms, only increments when the term list resets
 A   | First input:     input[0]
 B   | Second input:    input[1]
 C   | Third input:     input[2]
 Z   | Previous item in sequence: sequence[-1] || 0
 Y   | Second previous item in sequence: sequence[-2] || 0
 X   | Third previous item in sequence: sequence[-3] || 0

-----| Unary Operators
 +   | Plus:             +x
 -   | Negation:         -x
 ~   | Bitwise invert:   ~x
 /   | Reciprocal:       /x
 !   | Logical not:      !x
 _l  | Rotate left:      _lx
 _r  | Rotate right:     _rx
 _+  | Add one:          _+x
 _-  | Subtract one:     _-x

-----| Post-Unary Operators
 !   | Factorial:        x!
 
-----| Operators
 %   | Modulus:          x%y
 *   | Multiplication:   x*y
 +   | Addition:         x+ 
 -   | Subtraction:      x-y
 /   | Division:         x/y
 _/  | Integer (floor) division: x_/y
 ^   | Exponent:         x^y
 ~   | Concatenation:    x~y
 e   | Scientific Notation: xey
 =   | Equality:         x=y
 _=  | Inequality:       x_=y
 <   | Less than:        x<y
 _<  | Less than or equal to: x_<y
 >   | Greater than:     x>y
 _>  | Greater than or equal to: x_>y
 &   | Logical and:      x&y
 |   | Logical or:       x|y
 i   | In:               xiy
 _|  | Bitwise or:       x_|y
 _n  | Bitwise nor:      x_ny
 _^  | Bitwise xor:      x_^y
 _x  | Bitwise xnor:     x_ny
 _&  | Bitwise and:      x_&y
 _N  | Bitwise nand:     x_Ny
 _{  | Bitwise left shift: x_<y
 _}  | Bitwise right shift: x_>y

-----| Functions
 a   | Line 1:           a...)
 b   | Line 2:           b...)
 c   | Line 3:           c...)
 d   | Lines:            dx,...)
 D   | Digits            Dx)
 f   | Factorial:        fx)
 F   | Floor:            Fx)
 I   | Input:            Ix)
 j   | Join:             j{...}[,x]) (default x: "")
 l   | Logarithm:        lx[,y]) (default y: _e)
 L   | Length:           Lx[,y]) (if y exists, include "." in count)
 m   | Min:              m{...})
 M   | Max:              M{...})
 O   | OEIS:             O<seqNum><seqLetter>x)
 p   | Next Prime (exclusive): px)
 P   | Previous:         Px)
 q   | Prime Factors:    qx)
 Q   | Deduplicate       Qx)
 r   | Root:             rx[,y]) (default y: 2)
 R   | Round:            Rx)
 s   | Sort:             s{...}[,x]) (if x exists, reverse the order)
 S   | String:           Sx)
 T   | Ceil:             Tx)
 u   | Count:            u{...},x)
 U   | Sum:              Ux)
 v   | Absolute value:   vx)
 V   | Average:          V{...})
 x   | Exp:              xx)
 z   | Divisors:         zx)
 \c  | Cosine:           \cx)
 \l  | Log 10:           \lx)
 \r  | Reverse:          \rx[,y]) (if y exists, include "." in reversal)
 \R  | Rotate:           \Rx,y[,z]) (+y goes right, -y goes left) (if z exists, move ".")
 \s  | Sine:             \sx)
 \t  | Tangent:          \tx)
 \z  | Proper Divisors:  \zx)

-----| Constants
 `2  | 1/2
 `3  | 1/3
 `4  | 1/4
 `0  | 1/10
 `c  | Catalan's constant: Sum of 1/1^2 - 1/3^2 + 1/5^2 - 1/7^2 + ...
 `e  | e: Base of the natural logarithm
 `g  | Golden Ratio: .5 * (sqrt(5) + 1)
 `G  | Glaisher-Kinkelin constant
 `k  | Khinchin's constant
 `p  | pi: Circumference divided by diameter in a perfect circle
 `y  | Euler-Mascheroni constant: limiting difference between the harmonic series and the natural logarithm
 
 #TODO: GCD, LCM, toBase, more trig functions, 

-----| All ASCII
 \n  | (Literal newline) start new program on next line; can be referenced with a-d
' '  | (Space) #eats all container closers (")", "]", "}", etc.)
 !   | Factorial / logical not
 "   | (param stringify) literal quotes
 #   | (param default input) conditional
 $   | current index
 %   | modulus
 &   | logical and
 '   | literal quotes
 (   | Opening parenthesis.
 )   | Closing parenthesis for functions or opening parenthesis. Can be left off of program if before EOF or newline.
 *   | multiplication
 +   | addition
 ,   | item/term separator
 -   | subtraction
 .   | decimal point
 /   | division
 0   | zero
 1   | one
 2   | two
 3   | three
 4   | four
 5   | five
 6   | six
 7   | seven
 8   | eight
 9   | nine
 :   | (mode series) # ternary finish
 ;   | (mode sum), function separator
 <   | less than
 =   | (param start) equality
 >   | greater than
 ?   | (mode query) # ternary start
 @   | literal escape
 A   | first input
 B   | second input
 C   | third input
 D   | digits
 E   | # apply function to finite sequence
 F   | floor
 G   | # GCD
 H   |
 I   | input func
 J   | # to base
 K   |
 L   | length
 M   | max
 N   | current value in conditional
 O   | OEIS
 P   | previous func
 Q   | deduplicate
 R   | round
 S   | convert to string
 T   | ceiling
 U   | sum
 V   | average
 W   |
 X   | third previous term
 Y   | second previous term
 Z   | previous term
 [   | # index start
 \   | extra builtins start
 ]   | # index finish
 ^   | exponentiation
 _   | extra operators start
 `   | constants start
 a   | first line
 b   | second line
 c   | third line
 d   | lines function
 e   | scientific notation
 f   | factorial
 g   | # LCM
 h   | char
 i   | in
 j   | join
 k   | like $, but if there are multiple terms, it only increments when the terms reset
 l   | logarithm (default base e)
 m   | min
 n   | input n
 o   | ordinal
 p   | next prime
 q   | prime factors
 r   | root
 s   | sort
 t   | ten
 u   | count
 v   | absolute value
 w   | smallest positive integer not yet in sequence
 x   | exp
 y   |
 z   | divisors
 {   | start finite sequence
 |   | (meta separator) logical or
 }   | close finite sequence
 ~   | concatenation
